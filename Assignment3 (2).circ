<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="5.0.3-HC" version="1.0">
  This file is intended to be loaded by Logisim-evolution (https://github.com/kevinawalsh/logisim-evolution).

  <lib desc="#Wiring" name="0">
    <tool name="Constant">
      <a name="value" val="0x1"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1">
    <tool name="PLA">
      <a name="table" val=""/>
    </tool>
  </lib>
  <lib desc="#Plexers" name="2">
    <tool name="Multiplexer">
      <a name="enable" val="false"/>
    </tool>
    <tool name="Demultiplexer">
      <a name="enable" val="false"/>
    </tool>
  </lib>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="ROM">
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5">
    <tool name="RGB Video">
      <a name="fixed" val="0#888 RGB (24 bit)"/>
    </tool>
  </lib>
  <lib desc="#Base" name="6">
    <tool name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <lib desc="#Analog" name="7"/>
  <lib desc="jar#components.jar#com.github.itoshkov.logisimn2t.Components" name="8"/>
  <main name="ALU"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
    <a name="simsmooth" val="50"/>
  </options>
  <mappings>
    <tool lib="6" map="Button2" name="Poke Tool"/>
    <tool lib="6" map="Button3" name="Menu Tool"/>
    <tool lib="6" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="6" name="Poke Tool"/>
    <tool lib="6" name="Edit Tool"/>
    <tool lib="6" name="Wiring Tool"/>
    <tool lib="6" name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
    <tool lib="6" name="Cutter Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="type" val="output"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate">
      <a name="facing" val="south"/>
    </tool>
    <tool lib="1" name="AND Gate">
      <a name="facing" val="south"/>
    </tool>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="ALU">
    <a name="appearance" val="custom"/>
    <comp lib="0" loc="(190,1050)" name="Pin">
      <a name="label" val="a"/>
      <a name="radix" val="10signed"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(190,1110)" name="Pin">
      <a name="label" val="b"/>
      <a name="radix" val="10signed"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(400,1510)" name="Constant">
      <a name="value" val="0x0001"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(490,1420)" name="Constant">
      <a name="value" val="0x0001"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(590,1480)" name="Splitter">
      <a name="bit0" val="none"/>
      <a name="bit1" val="none"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="0"/>
      <a name="bit2" val="none"/>
      <a name="bit3" val="none"/>
      <a name="bit4" val="none"/>
      <a name="bit5" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="16"/>
    </comp>
    <comp lib="0" loc="(600,1430)" name="Constant">
      <a name="radix" val="10unsigned"/>
      <a name="value" val="0x0000"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(600,1450)" name="Constant">
      <a name="radix" val="10unsigned"/>
      <a name="value" val="0x0001"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(690,1040)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="op"/>
      <a name="labelloc" val="north"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(740,1120)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="out"/>
      <a name="labelloc" val="east"/>
      <a name="radix" val="10signed"/>
      <a name="type" val="output"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(760,1400)" name="Splitter">
      <a name="fanout" val="16"/>
      <a name="incoming" val="16"/>
    </comp>
    <comp lib="0" loc="(950,1320)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="zero"/>
      <a name="labelloc" val="south"/>
      <a name="type" val="output"/>
    </comp>
    <comp lib="1" loc="(390,1440)" name="NOT Gate">
      <a name="facing" val="south"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(490,1380)" name="NOT Gate">
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(560,1270)" name="NOT Gate">
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(560,1330)" name="NOT Gate">
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(610,1060)" name="AND Gate">
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(610,1130)" name="OR Gate">
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(610,1250)" name="AND Gate">
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(610,1310)" name="OR Gate">
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(950,1320)" name="NOR Gate">
      <a name="inputs" val="16"/>
    </comp>
    <comp lib="2" loc="(630,1440)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="2" loc="(710,1110)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="select" val="3"/>
      <a name="selloc" val="tr"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="3" loc="(440,1500)" name="Adder">
      <a name="width" val="16"/>
    </comp>
    <comp lib="3" loc="(520,1480)" name="Adder">
      <a name="width" val="16"/>
    </comp>
    <comp lib="3" loc="(530,1410)" name="Adder">
      <a name="width" val="16"/>
    </comp>
    <comp lib="3" loc="(600,1190)" name="Adder">
      <a name="width" val="16"/>
    </comp>
    <comp lib="3" loc="(610,1370)" name="Adder">
      <a name="width" val="16"/>
    </comp>
    <comp lib="6" loc="(11,21)" name="Text">
      <a name="font" val="SansSerif bold 16"/>
      <a name="halign" val="left"/>
      <a name="text">This is the brawn of the computer.

The ALU is responsible for performing almost every arithmetic or logical operation
in a modern computer. A premade ALU is provided in the AL

Function:
- If (op == 000), set out = a &amp; b (bitwise AND)
- If (op == 001), set out = a || b (bitwise OR)
- If (op == 010), set out = a + b (addition)

- If (op == 100), set out = a &amp; !b (a and not b)
- If (op == 101), set out = a || !b (a or not b)

- If (op == 110), set out = a - b (subtraction)

- If (op == 111), set out = 0000000000000001 if a &lt; b 
										else 0000000000000000 (set-on-less-than)

- Zero = 1 if (out == 0) else Zero = 0

Hints:
- Tackle the opcodes in the groups described above (first three, next two, and so on)
- For the first three, ignore the MSB of the opcode.

- For the next two, use the MSB to control between negating or not negating B

- At this point, subtraction should be almost implemented.
- Think about two's complement. You have half of two's complement implemented currently.
- You just need to make one connection to fully implement two's complement subtraction

- To determine if A &lt; B, you can use subtraction. 
- If A &lt; B, then A - B should be negative.
- Think about how to determine if a number is negative
- Use that to select between the output for SLT (set on less than)

- Finally, determine how to set the Zero output. You might need to use a splitter for this</a>
    </comp>
    <wire from="(190,1050)" to="(320,1050)"/>
    <wire from="(190,1110)" to="(200,1110)"/>
    <wire from="(200,1080)" to="(200,1110)"/>
    <wire from="(200,1080)" to="(340,1080)"/>
    <wire from="(320,1040)" to="(320,1050)"/>
    <wire from="(320,1040)" to="(350,1040)"/>
    <wire from="(340,1080)" to="(340,1150)"/>
    <wire from="(340,1080)" to="(560,1080)"/>
    <wire from="(340,1150)" to="(370,1150)"/>
    <wire from="(350,1040)" to="(350,1110)"/>
    <wire from="(350,1040)" to="(560,1040)"/>
    <wire from="(350,1110)" to="(360,1110)"/>
    <wire from="(360,1110)" to="(360,1190)"/>
    <wire from="(360,1110)" to="(560,1110)"/>
    <wire from="(360,1190)" to="(380,1190)"/>
    <wire from="(370,1150)" to="(370,1210)"/>
    <wire from="(370,1150)" to="(560,1150)"/>
    <wire from="(370,1210)" to="(390,1210)"/>
    <wire from="(380,1190)" to="(380,1230)"/>
    <wire from="(380,1190)" to="(550,1190)"/>
    <wire from="(380,1230)" to="(400,1230)"/>
    <wire from="(390,1210)" to="(390,1270)"/>
    <wire from="(390,1210)" to="(550,1210)"/>
    <wire from="(390,1270)" to="(410,1270)"/>
    <wire from="(390,1380)" to="(390,1410)"/>
    <wire from="(390,1380)" to="(430,1380)"/>
    <wire from="(390,1440)" to="(390,1490)"/>
    <wire from="(390,1490)" to="(400,1490)"/>
    <wire from="(400,1230)" to="(400,1290)"/>
    <wire from="(400,1230)" to="(560,1230)"/>
    <wire from="(400,1290)" to="(420,1290)"/>
    <wire from="(410,1270)" to="(410,1330)"/>
    <wire from="(410,1270)" to="(530,1270)"/>
    <wire from="(410,1330)" to="(430,1330)"/>
    <wire from="(420,1290)" to="(420,1360)"/>
    <wire from="(420,1290)" to="(560,1290)"/>
    <wire from="(420,1360)" to="(440,1360)"/>
    <wire from="(430,1330)" to="(430,1380)"/>
    <wire from="(430,1330)" to="(530,1330)"/>
    <wire from="(430,1380)" to="(460,1380)"/>
    <wire from="(440,1360)" to="(440,1470)"/>
    <wire from="(440,1360)" to="(570,1360)"/>
    <wire from="(440,1470)" to="(480,1470)"/>
    <wire from="(440,1500)" to="(480,1500)"/>
    <wire from="(480,1490)" to="(480,1500)"/>
    <wire from="(490,1380)" to="(490,1400)"/>
    <wire from="(520,1480)" to="(590,1480)"/>
    <wire from="(530,1410)" to="(570,1410)"/>
    <wire from="(550,1180)" to="(550,1190)"/>
    <wire from="(550,1180)" to="(560,1180)"/>
    <wire from="(550,1200)" to="(550,1210)"/>
    <wire from="(550,1200)" to="(560,1200)"/>
    <wire from="(570,1380)" to="(570,1410)"/>
    <wire from="(600,1190)" to="(620,1190)"/>
    <wire from="(610,1060)" to="(670,1060)"/>
    <wire from="(610,1080)" to="(610,1130)"/>
    <wire from="(610,1080)" to="(670,1080)"/>
    <wire from="(610,1250)" to="(630,1250)"/>
    <wire from="(610,1310)" to="(640,1310)"/>
    <wire from="(610,1370)" to="(650,1370)"/>
    <wire from="(610,1460)" to="(610,1470)"/>
    <wire from="(620,1090)" to="(620,1190)"/>
    <wire from="(620,1090)" to="(670,1090)"/>
    <wire from="(630,1110)" to="(630,1250)"/>
    <wire from="(630,1110)" to="(670,1110)"/>
    <wire from="(630,1440)" to="(660,1440)"/>
    <wire from="(640,1120)" to="(640,1310)"/>
    <wire from="(640,1120)" to="(670,1120)"/>
    <wire from="(650,1130)" to="(650,1370)"/>
    <wire from="(650,1130)" to="(670,1130)"/>
    <wire from="(660,1140)" to="(660,1440)"/>
    <wire from="(660,1140)" to="(670,1140)"/>
    <wire from="(670,1060)" to="(670,1070)"/>
    <wire from="(690,1040)" to="(690,1070)"/>
    <wire from="(710,1110)" to="(720,1110)"/>
    <wire from="(720,1110)" to="(720,1400)"/>
    <wire from="(720,1110)" to="(740,1110)"/>
    <wire from="(720,1400)" to="(760,1400)"/>
    <wire from="(740,1110)" to="(740,1120)"/>
    <wire from="(780,1240)" to="(890,1240)"/>
    <wire from="(780,1250)" to="(890,1250)"/>
    <wire from="(780,1260)" to="(890,1260)"/>
    <wire from="(780,1270)" to="(890,1270)"/>
    <wire from="(780,1280)" to="(890,1280)"/>
    <wire from="(780,1290)" to="(890,1290)"/>
    <wire from="(780,1300)" to="(890,1300)"/>
    <wire from="(780,1310)" to="(890,1310)"/>
    <wire from="(780,1320)" to="(890,1320)"/>
    <wire from="(780,1330)" to="(880,1330)"/>
    <wire from="(780,1340)" to="(870,1340)"/>
    <wire from="(780,1350)" to="(860,1350)"/>
    <wire from="(780,1360)" to="(850,1360)"/>
    <wire from="(780,1370)" to="(840,1370)"/>
    <wire from="(780,1380)" to="(830,1380)"/>
    <wire from="(780,1390)" to="(820,1390)"/>
    <wire from="(820,1390)" to="(820,1400)"/>
    <wire from="(820,1400)" to="(890,1400)"/>
    <wire from="(830,1380)" to="(830,1390)"/>
    <wire from="(830,1390)" to="(890,1390)"/>
    <wire from="(840,1370)" to="(840,1380)"/>
    <wire from="(840,1380)" to="(890,1380)"/>
    <wire from="(850,1360)" to="(850,1370)"/>
    <wire from="(850,1370)" to="(890,1370)"/>
    <wire from="(860,1350)" to="(860,1360)"/>
    <wire from="(860,1360)" to="(890,1360)"/>
    <wire from="(870,1340)" to="(870,1350)"/>
    <wire from="(870,1350)" to="(890,1350)"/>
    <wire from="(880,1330)" to="(880,1340)"/>
    <wire from="(880,1340)" to="(890,1340)"/>
    <wire from="(890,1320)" to="(890,1330)"/>
  </circuit>
  <circuit name="Bit">
    <comp lib="0" loc="(230,440)" name="Pin">
      <a name="label" val="in"/>
    </comp>
    <comp lib="0" loc="(230,510)" name="Clock"/>
    <comp lib="0" loc="(290,360)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="load"/>
      <a name="labelloc" val="north"/>
    </comp>
    <comp lib="0" loc="(470,410)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="out"/>
      <a name="labelloc" val="east"/>
      <a name="type" val="output"/>
    </comp>
    <comp lib="2" loc="(300,440)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="selloc" val="tr"/>
    </comp>
    <comp lib="4" loc="(340,420)" name="D Flip-Flop">
      <a name="appearance" val="evolution"/>
    </comp>
    <comp lib="6" loc="(265,290)" name="Text"/>
    <comp lib="6" loc="(347,314)" name="Text"/>
    <comp lib="6" loc="(40,34)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="halign" val="left"/>
      <a name="text">Function:
if load(t-1) then out(t) = in(t-1)
else out(t) = out(t-1)

More simply, when load = 1, 'out' will store the value of 'in' every rising clock edge. When load = 0, 
'out' will not change, even when 'in' changes.

You do not need to use the S, R, or Q-complement ports of the D-FlipFlop

The implementation of this can be found in the lecture slides. 
Take some time to play around with this component (especially the clock) and see how it works.
If you want the clock to automatically tick, go to Simulate&gt;Auto Tick Enabled. You can change
the speed of the clock with Simulate&gt;Auto Tick Frequency

To test this, I recommend turning the Clock to Auto-Tick and verifying that when load is 1, you can
load a value into the flip flop, and when load is 0, the flip flop doesn't change it's value</a>
    </comp>
    <comp lib="6" loc="(604,296)" name="Text"/>
    <wire from="(230,440)" to="(270,440)"/>
    <wire from="(230,510)" to="(330,510)"/>
    <wire from="(270,430)" to="(270,440)"/>
    <wire from="(270,450)" to="(270,500)"/>
    <wire from="(270,500)" to="(420,500)"/>
    <wire from="(280,420)" to="(290,420)"/>
    <wire from="(290,360)" to="(290,420)"/>
    <wire from="(300,440)" to="(330,440)"/>
    <wire from="(330,430)" to="(330,440)"/>
    <wire from="(330,470)" to="(330,510)"/>
    <wire from="(390,430)" to="(420,430)"/>
    <wire from="(420,430)" to="(420,500)"/>
    <wire from="(420,430)" to="(470,430)"/>
    <wire from="(470,410)" to="(470,430)"/>
  </circuit>
  <circuit name="Register">
    <comp lib="0" loc="(190,370)" name="Pin">
      <a name="label" val="in"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(210,1290)" name="Splitter">
      <a name="fanout" val="16"/>
      <a name="incoming" val="16"/>
      <a name="spacing" val="6"/>
    </comp>
    <comp lib="0" loc="(250,270)" name="Pin">
      <a name="facing" val="south"/>
      <a name="label" val="load"/>
    </comp>
    <comp lib="0" loc="(380,360)" name="Splitter">
      <a name="facing" val="west"/>
      <a name="fanout" val="16"/>
      <a name="incoming" val="16"/>
      <a name="spacing" val="6"/>
    </comp>
    <comp lib="0" loc="(440,360)" name="Pin">
      <a name="facing" val="west"/>
      <a name="label" val="out"/>
      <a name="labelloc" val="east"/>
      <a name="type" val="output"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(250,320)" name="NOT Gate">
      <a name="facing" val="south"/>
    </comp>
    <comp lib="6" loc="(52,54)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="halign" val="left"/>
      <a name="text">Function:
if load(t-1) then out(t) = in(t-1)
else out(t) = out(t-1)

More simply, when load = 1, 'out' will store the value of 'in' every rising clock edge. When load = 0, 
'out' will not change, even when 'in' changes.

The construction of a w-bit Register chip from 1-bit registers is straightforward. All you have
to do is construct an array of w Bit gates and feed the register's load input to every one of them.

To test this, I recommend turning the Clock to Auto-Tick. When load is 1, you should be able to load a 
16-bit value into the register, when you turn load off, that value should remain in place.</a>
    </comp>
    <comp loc="(360,1030)" name="Bit"/>
    <comp loc="(360,1090)" name="Bit"/>
    <comp loc="(360,1150)" name="Bit"/>
    <comp loc="(360,1210)" name="Bit"/>
    <comp loc="(360,1270)" name="Bit"/>
    <comp loc="(360,370)" name="Bit"/>
    <comp loc="(360,430)" name="Bit"/>
    <comp loc="(360,490)" name="Bit"/>
    <comp loc="(360,550)" name="Bit"/>
    <comp loc="(360,610)" name="Bit"/>
    <comp loc="(360,670)" name="Bit"/>
    <comp loc="(360,730)" name="Bit"/>
    <comp loc="(360,790)" name="Bit"/>
    <comp loc="(360,850)" name="Bit"/>
    <comp loc="(360,910)" name="Bit"/>
    <comp loc="(360,970)" name="Bit"/>
    <wire from="(190,370)" to="(210,370)"/>
    <wire from="(210,370)" to="(210,1290)"/>
    <wire from="(230,1040)" to="(260,1040)"/>
    <wire from="(230,1100)" to="(260,1100)"/>
    <wire from="(230,1160)" to="(260,1160)"/>
    <wire from="(230,1220)" to="(260,1220)"/>
    <wire from="(230,1280)" to="(260,1280)"/>
    <wire from="(230,380)" to="(260,380)"/>
    <wire from="(230,440)" to="(260,440)"/>
    <wire from="(230,500)" to="(260,500)"/>
    <wire from="(230,560)" to="(260,560)"/>
    <wire from="(230,620)" to="(260,620)"/>
    <wire from="(230,680)" to="(260,680)"/>
    <wire from="(230,740)" to="(260,740)"/>
    <wire from="(230,800)" to="(260,800)"/>
    <wire from="(230,860)" to="(260,860)"/>
    <wire from="(230,920)" to="(260,920)"/>
    <wire from="(230,980)" to="(260,980)"/>
    <wire from="(250,1030)" to="(250,1090)"/>
    <wire from="(250,1030)" to="(260,1030)"/>
    <wire from="(250,1090)" to="(250,1150)"/>
    <wire from="(250,1090)" to="(260,1090)"/>
    <wire from="(250,1150)" to="(250,1210)"/>
    <wire from="(250,1150)" to="(260,1150)"/>
    <wire from="(250,1210)" to="(250,1270)"/>
    <wire from="(250,1210)" to="(260,1210)"/>
    <wire from="(250,1270)" to="(260,1270)"/>
    <wire from="(250,270)" to="(250,290)"/>
    <wire from="(250,320)" to="(250,370)"/>
    <wire from="(250,370)" to="(250,430)"/>
    <wire from="(250,370)" to="(260,370)"/>
    <wire from="(250,430)" to="(250,490)"/>
    <wire from="(250,430)" to="(260,430)"/>
    <wire from="(250,490)" to="(250,550)"/>
    <wire from="(250,490)" to="(260,490)"/>
    <wire from="(250,550)" to="(250,610)"/>
    <wire from="(250,550)" to="(260,550)"/>
    <wire from="(250,610)" to="(250,670)"/>
    <wire from="(250,610)" to="(260,610)"/>
    <wire from="(250,670)" to="(250,730)"/>
    <wire from="(250,670)" to="(260,670)"/>
    <wire from="(250,730)" to="(250,790)"/>
    <wire from="(250,730)" to="(260,730)"/>
    <wire from="(250,790)" to="(250,850)"/>
    <wire from="(250,790)" to="(260,790)"/>
    <wire from="(250,850)" to="(250,910)"/>
    <wire from="(250,850)" to="(260,850)"/>
    <wire from="(250,910)" to="(250,970)"/>
    <wire from="(250,910)" to="(260,910)"/>
    <wire from="(250,970)" to="(250,1030)"/>
    <wire from="(250,970)" to="(260,970)"/>
    <wire from="(380,360)" to="(440,360)"/>
  </circuit>
</project>
